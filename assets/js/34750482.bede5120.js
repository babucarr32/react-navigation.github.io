"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["69726"],{25181:function(n,e,t){t.r(e),t.d(e,{metadata:()=>r,contentTitle:()=>l,default:()=>w,assets:()=>u,toc:()=>d,frontMatter:()=>c});var r=JSON.parse('{"id":"drawer-based-navigation","title":"Drawer navigation","description":"Common pattern in navigation is to use drawer from left (sometimes right) side for navigating between screens.","source":"@site/versioned_docs/version-7.x/drawer-based-navigation.md","sourceDirName":".","slug":"/drawer-based-navigation","permalink":"/docs/drawer-based-navigation","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/drawer-based-navigation.md","tags":[],"version":"7.x","frontMatter":{"id":"drawer-based-navigation","title":"Drawer navigation","sidebar_label":"Drawer navigation"}}'),a=t("85893"),o=t("50065"),i=t("47902"),s=t("5525");let c={id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"},l=void 0,u={},d=[{value:"Minimal example of drawer-based navigation",id:"minimal-example-of-drawer-based-navigation",level:2},{value:"Opening and closing drawer",id:"opening-and-closing-drawer",level:2}];function g(n){let e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Common pattern in navigation is to use drawer from left (sometimes right) side for navigating between screens."}),"\n",(0,a.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,a.jsx)("source",{src:"/assets/navigators/drawer/drawer.mp4"})}),"\n",(0,a.jsxs)(e.p,{children:["Before continuing, first install and configure ",(0,a.jsx)(e.a,{href:"https://github.com/react-navigation/react-navigation/tree/main/packages/drawer",children:(0,a.jsx)(e.code,{children:"@react-navigation/drawer"})})," and its dependencies following the ",(0,a.jsx)(e.a,{href:"/docs/drawer-navigator#installation",children:"installation instructions"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"minimal-example-of-drawer-based-navigation",children:"Minimal example of drawer-based navigation"}),"\n",(0,a.jsxs)(e.p,{children:["To use this drawer navigator, import it from ",(0,a.jsx)(e.code,{children:"@react-navigation/drawer"}),":\n(swipe right to open)"]}),"\n",(0,a.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(e.pre,{"data-name":"Drawer navigation","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer navigation" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  screens: {\n    Home: HomeScreen,\n    Notifications: NotificationsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(e.pre,{"data-name":"Drawer navigation","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer navigation" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator initialRouteName=\"Home\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Notifications\" component={NotificationsScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(e.h2,{id:"opening-and-closing-drawer",children:"Opening and closing drawer"}),"\n",(0,a.jsx)(e.p,{children:"To open and close drawer, use the following helpers:"}),"\n",(0,a.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(e.pre,{"data-name":"Drawer open and close","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer open and close" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(e.pre,{"data-name":"Drawer open and close","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer open and close" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(e.p,{children:"If you would like to toggle the drawer you call the following:"}),"\n",(0,a.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(e.pre,{"data-name":"Drawer toggle","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer toggle" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(e.pre,{"data-name":"Drawer toggle","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer toggle" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(e.p,{children:"Each of these functions, behind the scenes, are simply dispatching actions:"}),"\n",(0,a.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(e.pre,{"data-name":"Navigation dispatcher","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Navigation dispatcher" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open drawer\n      </Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n      // codeblock-focus-end\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(e.pre,{"data-name":"Navigation dispatcher","data-snack":"true",children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Navigation dispatcher" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open drawer\n      </Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n      // codeblock-focus-end\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(e.p,{children:"If you would like to determine if drawer is open or closed, you can do the following:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",metastring:'name="Drawer hook"',children:"import { useDrawerStatus } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useDrawerStatus() === 'open';\n"})})]})}function w(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(g,{...n})}):g(n)}},5525:function(n,e,t){t.d(e,{Z:()=>i});var r=t("85893");t("67294");var a=t("67026");let o="tabItem_Ymn6";function i(n){let{children:e,hidden:t,className:i}=n;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:t,children:e})}},47902:function(n,e,t){t.d(e,{Z:()=>x});var r=t("85893"),a=t("67294"),o=t("67026"),i=t("69599"),s=t("16550"),c=t("32000"),l=t("4520"),u=t("38341"),d=t("76009");function g(n){var e,t;return null!==(t=null===(e=a.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,a.isValidElement)(n)&&function(n){let{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof n.type?n.type:n.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===e?void 0:e.filter(Boolean))&&void 0!==t?t:[]}function w(n){let{value:e,tabValues:t}=n;return t.some(n=>n.value===e)}var m=t("7227");let p="tabList__CuJ",f="tabItem_LNqP";function v(n){let{className:e,block:t,selectedValue:a,selectValue:s,tabValues:c}=n,l=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=n=>{let e=n.currentTarget,t=c[l.indexOf(e)].value;t!==a&&(u(e),s(t))},g=n=>{var e,t;let r=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{let t=l.indexOf(n.currentTarget)+1;r=null!==(e=l[t])&&void 0!==e?e:l[0];break}case"ArrowLeft":{let e=l.indexOf(n.currentTarget)-1;r=null!==(t=l[e])&&void 0!==t?t:l[l.length-1]}}null==r||r.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},e),children:c.map(n=>{let{value:e,label:t,attributes:i}=n;return(0,r.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>l.push(n),onKeyDown:g,onClick:d,...i,className:(0,o.Z)("tabs__item",f,null==i?void 0:i.className,{"tabs__item--active":a===e}),children:null!=t?t:e},e)})})}function D(n){let{lazy:e,children:t,selectedValue:i}=n,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){let n=s.find(n=>n.props.value===i);return n?(0,a.cloneElement)(n,{className:(0,o.Z)("margin-top--md",n.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i}))})}function h(n){let e=function(n){let{defaultValue:e,queryString:t=!1,groupId:r}=n,o=function(n){let{values:e,children:t}=n;return(0,a.useMemo)(()=>{let n=null!=e?e:g(t).map(n=>{let{props:{value:e,label:t,attributes:r,default:a}}=n;return{value:e,label:t,attributes:r,default:a}});return!function(n){let e=(0,u.lx)(n,(n,e)=>n.value===e.value);if(e.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(e.map(n=>n.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(n),n},[e,t])}(n),[i,m]=(0,a.useState)(()=>(function(n){var e;let{defaultValue:t,tabValues:r}=n;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!w({value:t,tabValues:r}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(r.map(n=>n.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let a=null!==(e=r.find(n=>n.default))&&void 0!==e?e:r[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:e,tabValues:o})),[p,f]=function(n){let{queryString:e=!1,groupId:t}=n,r=(0,s.k6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:e,groupId:t}),i=(0,l._X)(o);return[i,(0,a.useCallback)(n=>{if(!o)return;let e=new URLSearchParams(r.location.search);e.set(o,n),r.replace({...r.location,search:e.toString()})},[o,r])]}({queryString:t,groupId:r}),[v,D]=function(n){var e;let{groupId:t}=n;let r=(e=t)?"docusaurus.tab.".concat(e):null,[o,i]=(0,d.Nk)(r);return[o,(0,a.useCallback)(n=>{if(!!r)i.set(n)},[r,i])]}({groupId:r}),h=(()=>{let n=null!=p?p:v;return w({value:n,tabValues:o})?n:null})();return(0,c.Z)(()=>{h&&m(h)},[h]),{selectedValue:i,selectValue:(0,a.useCallback)(n=>{if(!w({value:n,tabValues:o}))throw Error("Can't select invalid tab value=".concat(n));m(n),f(n),D(n)},[f,D,o]),tabValues:o}}(n);return(0,r.jsxs)("div",{className:(0,o.Z)("tabs-container",p),children:[(0,r.jsx)(v,{...e,...n}),(0,r.jsx)(D,{...e,...n})]})}function x(n){let e=(0,m.Z)();return(0,r.jsx)(h,{...n,children:g(n.children)},String(e))}},50065:function(n,e,t){t.d(e,{Z:function(){return s},a:function(){return i}});var r=t(67294);let a={},o=r.createContext(a);function i(n){let e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);