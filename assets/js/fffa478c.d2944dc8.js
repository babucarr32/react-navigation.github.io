"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["65451"],{4500:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>p,assets:()=>c,toc:()=>h,frontMatter:()=>l});var t=JSON.parse('{"id":"tab-view","title":"React Native Tab View","description":"React Native Tab View is a cross-platform Tab View component for React Native implemented using react-native-pager-view on Android & iOS, and PanResponder on Web, macOS, and Windows.","source":"@site/versioned_docs/version-7.x/tab-view.md","sourceDirName":".","slug":"/tab-view","permalink":"/docs/tab-view","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/tab-view.md","tags":[],"version":"7.x","frontMatter":{"id":"tab-view","title":"React Native Tab View","sidebar_label":"Tab View"},"sidebar":"docs","previous":{"title":"Elements","permalink":"/docs/elements"},"next":{"title":"Drawer Layout","permalink":"/docs/drawer-layout"}}'),r=i("85893"),a=i("50065"),o=i("47902"),s=i("5525");let l={id:"tab-view",title:"React Native Tab View",sidebar_label:"Tab View"},d=void 0,c={},h=[{value:"Installation",id:"installation",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"More examples on Snack",id:"more-examples-on-snack",level:2},{value:"API reference",id:"api-reference",level:2},{value:"<code>TabView</code>",id:"tabview",level:3},{value:"TabView Props",id:"tabview-props",level:4},{value:"<code>navigationState</code> (<code>required</code>)",id:"navigationstate-required",level:5},{value:"<code>onIndexChange</code> (<code>required</code>)",id:"onindexchange-required",level:5},{value:"<code>renderScene</code> (<code>required</code>)",id:"renderscene-required",level:5},{value:"<code>renderTabBar</code>",id:"rendertabbar",level:5},{value:"<code>tabBarPosition</code>",id:"tabbarposition",level:5},{value:"<code>lazy</code>",id:"lazy",level:5},{value:"<code>lazyPreloadDistance</code>",id:"lazypreloaddistance",level:5},{value:"<code>renderLazyPlaceholder</code>",id:"renderlazyplaceholder",level:5},{value:"<code>keyboardDismissMode</code>",id:"keyboarddismissmode",level:5},{value:"<code>swipeEnabled</code>",id:"swipeenabled",level:5},{value:"<code>animationEnabled</code>",id:"animationenabled",level:4},{value:"<code>onSwipeStart</code>",id:"onswipestart",level:5},{value:"<code>onSwipeEnd</code>",id:"onswipeend",level:5},{value:"<code>initialLayout</code>",id:"initiallayout",level:5},{value:"<code>overScrollMode</code>",id:"overscrollmode",level:5},{value:"<code>pagerStyle</code>",id:"pagerstyle",level:5},{value:"<code>style</code>",id:"style",level:5},{value:"<code>TabBar</code>",id:"tabbar",level:3},{value:"TabBar Props",id:"tabbar-props",level:4},{value:"<code>renderTabBarItem</code>",id:"rendertabbaritem",level:5},{value:"<code>renderIndicator</code>",id:"renderindicator",level:5},{value:"<code>onTabPress</code>",id:"ontabpress",level:5},{value:"<code>onTabLongPress</code>",id:"ontablongpress",level:5},{value:"<code>activeColor</code>",id:"activecolor",level:5},{value:"<code>inactiveColor</code>",id:"inactivecolor",level:5},{value:"<code>pressColor</code>",id:"presscolor",level:5},{value:"<code>pressOpacity</code>",id:"pressopacity",level:5},{value:"<code>scrollEnabled</code>",id:"scrollenabled",level:5},{value:"<code>bounces</code>",id:"bounces",level:5},{value:"<code>tabStyle</code>",id:"tabstyle",level:5},{value:"<code>indicatorStyle</code>",id:"indicatorstyle",level:5},{value:"<code>indicatorContainerStyle</code>",id:"indicatorcontainerstyle",level:5},{value:"<code>contentContainerStyle</code>",id:"contentcontainerstyle",level:5},{value:"<code>style</code> (<code>TabBar</code>)",id:"style-tabbar",level:5},{value:"<code>gap</code>",id:"gap",level:5},{value:"<code>testID</code> (<code>TabBar</code>)",id:"testid-tabbar",level:5},{value:"Options",id:"options",level:4},{value:"<code>accessibilityLabel</code>",id:"accessibilitylabel",level:5},{value:"<code>accessible</code>",id:"accessible",level:5},{value:"<code>testID</code>",id:"testid",level:5},{value:"<code>labelText</code>",id:"labeltext",level:5},{value:"<code>labelAllowFontScaling</code>",id:"labelallowfontscaling",level:5},{value:"<code>href</code>",id:"href",level:5},{value:"<code>label</code>",id:"label",level:5},{value:"<code>labelStyle</code>",id:"labelstyle",level:5},{value:"<code>icon</code>",id:"icon",level:5},{value:"<code>badge</code>",id:"badge",level:5},{value:"<code>sceneStyle</code>",id:"scenestyle",level:5},{value:"Optimization Tips",id:"optimization-tips",level:2},{value:"Avoid unnecessary re-renders",id:"avoid-unnecessary-re-renders",level:3},{value:"Avoid one frame delay",id:"avoid-one-frame-delay",level:3},{value:"Optimize large number of routes",id:"optimize-large-number-of-routes",level:3},{value:"Avoid rendering TabView inside ScrollView",id:"avoid-rendering-tabview-inside-scrollview",level:3},{value:"Use <code>lazy</code> and <code>renderLazyPlaceholder</code> props to render routes as needed",id:"use-lazy-and-renderlazyplaceholder-props-to-render-routes-as-needed",level:3}];function u(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["React Native Tab View is a cross-platform Tab View component for React Native implemented using ",(0,r.jsx)(n.a,{href:"https://github.com/callstack/react-native-viewpager",children:(0,r.jsx)(n.code,{children:"react-native-pager-view"})})," on Android & iOS, and ",(0,r.jsx)(n.a,{href:"https://reactnative.dev/docs/panresponder",children:"PanResponder"})," on Web, macOS, and Windows."]}),"\n",(0,r.jsx)(n.p,{children:"It follows material design guidelines by default, but you can also use your own custom tab bar or position the tab bar at the bottom."}),"\n",(0,r.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,r.jsx)("source",{src:"/assets/7.x/tab-view.mp4"})}),"\n",(0,r.jsxs)(n.p,{children:["This package doesn't integrate with React Navigation. If you want to integrate the tab view with React Navigation's navigation system, e.g. want to show screens in the tab bar and be able to navigate between them using ",(0,r.jsx)(n.code,{children:"navigation.navigate"})," etc, use ",(0,r.jsx)(n.a,{href:"/docs/material-top-tab-navigator",children:"Material Top Tab Navigator"})," instead."]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"To use this package, open a Terminal in the project root and run:"}),"\n",(0,r.jsxs)(o.Z,{groupId:"npm2yarn",children:[(0,r.jsx)(s.Z,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install react-native-tab-view\n"})})}),(0,r.jsx)(s.Z,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-tab-view\n"})})}),(0,r.jsx)(s.Z,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add react-native-tab-view\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Next, install ",(0,r.jsx)(n.a,{href:"https://github.com/callstack/react-native-viewpager",children:(0,r.jsx)(n.code,{children:"react-native-pager-view"})})," if you plan to support iOS and Android."]}),"\n",(0,r.jsx)(n.p,{children:"If you are using Expo, to ensure that you get the compatible versions of the libraries, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"expo install react-native-pager-view\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you are not using Expo, run the following:"}),"\n",(0,r.jsxs)(o.Z,{groupId:"npm2yarn",children:[(0,r.jsx)(s.Z,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install react-native-pager-view\n"})})}),(0,r.jsx)(s.Z,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-pager-view\n"})})}),(0,r.jsx)(s.Z,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add react-native-pager-view\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"We're done! Now you can build and run the app on your device/simulator."}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,r.jsx)(n.pre,{"data-name":"React Native Tab View","data-snack":"true",children:(0,r.jsx)(n.code,{className:"language-js",metastring:'name="React Native Tab View" snack',children:"// codeblock-focus-start\nimport * as React from 'react';\nimport { View, useWindowDimensions } from 'react-native';\nimport { TabView, SceneMap } from 'react-native-tab-view';\n\n// codeblock-focus-end\nconst FirstRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#ff4081' }} />\n);\n\nconst SecondRoute = () => (\n  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />\n);\n\n// codeblock-focus-start\nconst renderScene = SceneMap({\n  first: FirstRoute,\n  second: SecondRoute,\n});\n\nconst routes = [\n  { key: 'first', title: 'First' },\n  { key: 'second', title: 'Second' },\n];\n\nexport default function TabViewExample() {\n  const layout = useWindowDimensions();\n  const [index, setIndex] = React.useState(0);\n\n  return (\n    <TabView\n      navigationState={{ index, routes }}\n      renderScene={renderScene}\n      onIndexChange={setIndex}\n      initialLayout={{ width: layout.width }}\n    />\n  );\n}\n// codeblock-focus-end\n"})}),"\n",(0,r.jsx)(n.h2,{id:"more-examples-on-snack",children:"More examples on Snack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://snack.expo.io/@satya164/react-native-tab-view-custom-tabbar",children:"Custom Tab Bar"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://snack.expo.io/@satya164/react-native-tab-view-lazy-load",children:"Lazy Load"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API reference"}),"\n",(0,r.jsxs)(n.p,{children:["The package exports a ",(0,r.jsx)(n.code,{children:"TabView"})," component which is the one you'd use to render the tab view, and a ",(0,r.jsx)(n.code,{children:"TabBar"})," component which is the default tab bar implementation."]}),"\n",(0,r.jsx)(n.h3,{id:"tabview",children:(0,r.jsx)(n.code,{children:"TabView"})}),"\n",(0,r.jsx)(n.p,{children:"Container component responsible for rendering and managing tabs. Follows material design styles by default."}),"\n",(0,r.jsx)(n.p,{children:"Basic usage look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView\n  navigationState={{ index, routes }}\n  onIndexChange={setIndex}\n  renderScene={SceneMap({\n    first: FirstRoute,\n    second: SecondRoute,\n  })}\n/>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"tabview-props",children:"TabView Props"}),"\n",(0,r.jsxs)(n.h5,{id:"navigationstate-required",children:[(0,r.jsx)(n.code,{children:"navigationState"})," (",(0,r.jsx)(n.code,{children:"required"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"State for the tab view. The state should contain the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index"}),": a number representing the index of the active route in the ",(0,r.jsx)(n.code,{children:"routes"})," array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"routes"}),": an array containing a list of route objects used for rendering the tabs"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each route object should contain the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": a unique key to identify the route (required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),": title for the route to display in the tab bar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"icon"}),": icon for the route to display in the tab bar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"accessibilityLabel"}),": accessibility label for the tab button"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"testID"}),": test id for the tab button"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  index: 1,\n  routes: [\n    { key: 'music', title: 'Music' },\n    { key: 'albums', title: 'Albums' },\n    { key: 'recents', title: 'Recents' },\n    { key: 'purchased', title: 'Purchased' },\n  ]\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"TabView"})," is a controlled component, which means the ",(0,r.jsx)(n.code,{children:"index"})," needs to be updated via the ",(0,r.jsx)(n.code,{children:"onIndexChange"})," callback."]}),"\n",(0,r.jsxs)(n.h5,{id:"onindexchange-required",children:[(0,r.jsx)(n.code,{children:"onIndexChange"})," (",(0,r.jsx)(n.code,{children:"required"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Callback which is called on tab change, receives the index of the new tab as argument.\nThe navigation state needs to be updated when it's called, otherwise the change is dropped."}),"\n",(0,r.jsxs)(n.h5,{id:"renderscene-required",children:[(0,r.jsx)(n.code,{children:"renderScene"})," (",(0,r.jsx)(n.code,{children:"required"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderScene = ({ route, jumpTo }) => {\n  switch (route.key) {\n    case 'music':\n      return <MusicRoute jumpTo={jumpTo} />;\n    case 'albums':\n      return <AlbumsRoute jumpTo={jumpTo} />;\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You need to make sure that your individual routes implement a ",(0,r.jsx)(n.code,{children:"shouldComponentUpdate"})," to improve the performance. To make it easier to specify the components, you can use the ",(0,r.jsx)(n.code,{children:"SceneMap"})," helper."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"SceneMap"})," takes an object with the mapping of ",(0,r.jsx)(n.code,{children:"route.key"})," to React components and returns a function to use with ",(0,r.jsx)(n.code,{children:"renderScene"})," prop."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { SceneMap } from 'react-native-tab-view';\n\n...\n\nconst renderScene = SceneMap({\n  music: MusicRoute,\n  albums: AlbumsRoute,\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifying the components this way is easier and takes care of implementing a ",(0,r.jsx)(n.code,{children:"shouldComponentUpdate"})," method."]}),"\n",(0,r.jsx)(n.p,{children:"Each scene receives the following props:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"route"}),": the current route rendered by the component"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"jumpTo"}),": method to jump to other tabs, takes a ",(0,r.jsx)(n.code,{children:"route.key"})," as it's argument"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"position"}),": animated node which represents the current position"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"jumpTo"})," method can be used to navigate to other tabs programmatically:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"props.jumpTo('albums');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All the scenes rendered with ",(0,r.jsx)(n.code,{children:"SceneMap"})," are optimized using ",(0,r.jsx)(n.code,{children:"React.PureComponent"})," and don't re-render when parent's props or states change. If you need more control over how your scenes update (e.g. - triggering a re-render even if the ",(0,r.jsx)(n.code,{children:"navigationState"})," didn't change), use ",(0,r.jsx)(n.code,{children:"renderScene"})," directly instead of using ",(0,r.jsx)(n.code,{children:"SceneMap"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"IMPORTANT:"})," ",(0,r.jsx)(n.strong,{children:"Do not"})," pass inline functions to ",(0,r.jsx)(n.code,{children:"SceneMap"}),", for example, don't do the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"SceneMap({\n  first: () => <FirstRoute foo={props.foo} />,\n  second: SecondRoute,\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Always define your components elsewhere in the top level of the file. If you pass inline functions, it'll re-create the component every render, which will cause the entire route to unmount and remount every change. It's very bad for performance and will also cause any local state to be lost."}),"\n",(0,r.jsxs)(n.p,{children:["If you need to pass additional props, use a custom ",(0,r.jsx)(n.code,{children:"renderScene"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'first':\n      return <FirstRoute foo={this.props.foo} />;\n    case 'second':\n      return <SecondRoute />;\n    default:\n      return null;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h5,{id:"rendertabbar",children:(0,r.jsx)(n.code,{children:"renderTabBar"})}),"\n",(0,r.jsx)(n.p,{children:"Callback which returns a custom React Element to use as the tab bar:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { TabBar } from 'react-native-tab-view';\n\n...\n\n<TabView\n  renderTabBar={props => <TabBar {...props} />}\n  ...\n/>\n"})}),"\n",(0,r.jsx)(n.p,{children:"If this is not specified, the default tab bar is rendered. You pass this props to customize the default tab bar, provide your own tab bar, or disable the tab bar completely."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView\n  renderTabBar={() => null}\n  ...\n/>\n"})}),"\n",(0,r.jsx)(n.h5,{id:"tabbarposition",children:(0,r.jsx)(n.code,{children:"tabBarPosition"})}),"\n",(0,r.jsxs)(n.p,{children:["Position of the tab bar in the tab view. Possible values are ",(0,r.jsx)(n.code,{children:"'top'"})," and ",(0,r.jsx)(n.code,{children:"'bottom'"}),". Defaults to ",(0,r.jsx)(n.code,{children:"'top'"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"lazy",children:(0,r.jsx)(n.code,{children:"lazy"})}),"\n",(0,r.jsx)(n.p,{children:"Function which takes an object with the current route and returns a boolean to indicate whether to lazily render the scenes."}),"\n",(0,r.jsxs)(n.p,{children:["By default all scenes are rendered to provide a smoother swipe experience. But you might want to defer the rendering of unfocused scenes until the user sees them. To enable lazy rendering for a particular scene, return ",(0,r.jsx)(n.code,{children:"true"})," from ",(0,r.jsx)(n.code,{children:"lazy"})," for that ",(0,r.jsx)(n.code,{children:"route"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView\n  lazy={({ route }) => route.name === 'Albums'}\n  ...\n/>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When you enable lazy rendering for a screen, it will usually take some time to render when it comes into focus. You can use the ",(0,r.jsx)(n.code,{children:"renderLazyPlaceholder"})," prop to customize what the user sees during this short period."]}),"\n",(0,r.jsx)(n.p,{children:"You can also pass a boolean to enable lazy for all of the scenes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView lazy />\n"})}),"\n",(0,r.jsx)(n.h5,{id:"lazypreloaddistance",children:(0,r.jsx)(n.code,{children:"lazyPreloadDistance"})}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"lazy"})," is enabled, you can specify how many adjacent routes should be preloaded with this prop. This value defaults to ",(0,r.jsx)(n.code,{children:"0"})," which means lazy pages are loaded as they come into the viewport."]}),"\n",(0,r.jsx)(n.h5,{id:"renderlazyplaceholder",children:(0,r.jsx)(n.code,{children:"renderLazyPlaceholder"})}),"\n",(0,r.jsxs)(n.p,{children:["Callback which returns a custom React Element to render for routes that haven't been rendered yet. Receives an object containing the route as the argument. The ",(0,r.jsx)(n.code,{children:"lazy"})," prop also needs to be enabled."]}),"\n",(0,r.jsx)(n.p,{children:"This view is usually only shown for a split second. Keep it lightweight."}),"\n",(0,r.jsxs)(n.p,{children:["By default, this renders ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"keyboarddismissmode",children:(0,r.jsx)(n.code,{children:"keyboardDismissMode"})}),"\n",(0,r.jsx)(n.p,{children:"String indicating whether the keyboard gets dismissed in response to a drag gesture. Possible values are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'auto'"})," (default): the keyboard is dismissed when the index changes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'on-drag'"}),": the keyboard is dismissed when a drag begins."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'none'"}),": drags do not dismiss the keyboard."]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"swipeenabled",children:(0,r.jsx)(n.code,{children:"swipeEnabled"})}),"\n",(0,r.jsxs)(n.p,{children:["Boolean indicating whether to enable swipe gestures. Swipe gestures are enabled by default. Passing ",(0,r.jsx)(n.code,{children:"false"})," will disable swipe gestures, but the user can still switch tabs by pressing the tab bar."]}),"\n",(0,r.jsx)(n.h4,{id:"animationenabled",children:(0,r.jsx)(n.code,{children:"animationEnabled"})}),"\n",(0,r.jsx)(n.p,{children:"Enables animation when changing tab. By default it's true."}),"\n",(0,r.jsx)(n.h5,{id:"onswipestart",children:(0,r.jsx)(n.code,{children:"onSwipeStart"})}),"\n",(0,r.jsx)(n.p,{children:"Callback which is called when the swipe gesture starts, i.e. the user touches the screen and moves it."}),"\n",(0,r.jsx)(n.h5,{id:"onswipeend",children:(0,r.jsx)(n.code,{children:"onSwipeEnd"})}),"\n",(0,r.jsx)(n.p,{children:"Callback which is called when the swipe gesture ends, i.e. the user lifts their finger from the screen after the swipe gesture."}),"\n",(0,r.jsx)(n.h5,{id:"initiallayout",children:(0,r.jsx)(n.code,{children:"initialLayout"})}),"\n",(0,r.jsx)(n.p,{children:"Object containing the initial height and width of the screens. Passing this will improve the initial rendering performance. For most apps, this is a good default:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView\n  initialLayout={{ width: Dimensions.get('window').width }}\n  ...\n/>\n"})}),"\n",(0,r.jsx)(n.h5,{id:"overscrollmode",children:(0,r.jsx)(n.code,{children:"overScrollMode"})}),"\n",(0,r.jsxs)(n.p,{children:["Used to override default value of pager's overScroll mode. Can be ",(0,r.jsx)(n.code,{children:"auto"}),", ",(0,r.jsx)(n.code,{children:"always"})," or ",(0,r.jsx)(n.code,{children:"never"})," (Android only)."]}),"\n",(0,r.jsx)(n.h5,{id:"pagerstyle",children:(0,r.jsx)(n.code,{children:"pagerStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the pager view wrapping all the scenes."}),"\n",(0,r.jsx)(n.h5,{id:"style",children:(0,r.jsx)(n.code,{children:"style"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the tab view container."}),"\n",(0,r.jsx)(n.h3,{id:"tabbar",children:(0,r.jsx)(n.code,{children:"TabBar"})}),"\n",(0,r.jsxs)(n.p,{children:["Material design themed tab bar. To customize the tab bar, you'd need to use the ",(0,r.jsx)(n.code,{children:"renderTabBar"})," prop of ",(0,r.jsx)(n.code,{children:"TabView"})," to render the ",(0,r.jsx)(n.code,{children:"TabBar"})," and pass additional props."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, to customize the indicator color and the tab bar background color, you can pass ",(0,r.jsx)(n.code,{children:"indicatorStyle"})," and ",(0,r.jsx)(n.code,{children:"style"})," props to the ",(0,r.jsx)(n.code,{children:"TabBar"})," respectively:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderTabBar = props => (\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: 'white' }}\n    style={{ backgroundColor: 'pink' }}\n  />\n);\n\n//...\n\n\nreturn (\n  <TabView\n    renderTabBar={renderTabBar}\n    ...\n  />\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"tabbar-props",children:"TabBar Props"}),"\n",(0,r.jsx)(n.h5,{id:"rendertabbaritem",children:(0,r.jsx)(n.code,{children:"renderTabBarItem"})}),"\n",(0,r.jsxs)(n.p,{children:["Function which takes a ",(0,r.jsx)(n.code,{children:"TabBarItemProps"})," object and returns a custom React Element to be used as a tab button."]}),"\n",(0,r.jsx)(n.h5,{id:"renderindicator",children:(0,r.jsx)(n.code,{children:"renderIndicator"})}),"\n",(0,r.jsx)(n.p,{children:"Function which takes an object with the current route and returns a custom React Element to be used as a tab indicator."}),"\n",(0,r.jsx)(n.h5,{id:"ontabpress",children:(0,r.jsx)(n.code,{children:"onTabPress"})}),"\n",(0,r.jsx)(n.p,{children:"Function to execute on tab press. It receives the scene for the pressed tab, useful for things like scroll to top."}),"\n",(0,r.jsxs)(n.p,{children:["By default, tab press also switches the tab. To prevent this behavior, you can call ",(0,r.jsx)(n.code,{children:"preventDefault"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabBar\n  onTabPress={({ route, preventDefault }) => {\n    if (route.key === 'home') {\n      preventDefault();\n\n      // Do something else\n    }\n  }}\n  ...\n/>\n"})}),"\n",(0,r.jsx)(n.h5,{id:"ontablongpress",children:(0,r.jsx)(n.code,{children:"onTabLongPress"})}),"\n",(0,r.jsx)(n.p,{children:"Function to execute on tab long press, use for things like showing a menu with more options"}),"\n",(0,r.jsx)(n.h5,{id:"activecolor",children:(0,r.jsx)(n.code,{children:"activeColor"})}),"\n",(0,r.jsx)(n.p,{children:"Custom color for icon and label in the active tab."}),"\n",(0,r.jsx)(n.h5,{id:"inactivecolor",children:(0,r.jsx)(n.code,{children:"inactiveColor"})}),"\n",(0,r.jsx)(n.p,{children:"Custom color for icon and label in the inactive tab."}),"\n",(0,r.jsx)(n.h5,{id:"presscolor",children:(0,r.jsx)(n.code,{children:"pressColor"})}),"\n",(0,r.jsx)(n.p,{children:"Color for material ripple (Android >= 5.0 only)."}),"\n",(0,r.jsx)(n.h5,{id:"pressopacity",children:(0,r.jsx)(n.code,{children:"pressOpacity"})}),"\n",(0,r.jsx)(n.p,{children:"Opacity for pressed tab (iOS and Android < 5.0 only)."}),"\n",(0,r.jsx)(n.h5,{id:"scrollenabled",children:(0,r.jsx)(n.code,{children:"scrollEnabled"})}),"\n",(0,r.jsx)(n.p,{children:"Boolean indicating whether to make the tab bar scrollable."}),"\n",(0,r.jsxs)(n.p,{children:["If you set ",(0,r.jsx)(n.code,{children:"scrollEnabled"})," to ",(0,r.jsx)(n.code,{children:"true"}),", you should also specify a ",(0,r.jsx)(n.code,{children:"width"})," in ",(0,r.jsx)(n.code,{children:"tabStyle"})," to improve the initial render."]}),"\n",(0,r.jsx)(n.h5,{id:"bounces",children:(0,r.jsx)(n.code,{children:"bounces"})}),"\n",(0,r.jsx)(n.p,{children:"Boolean indicating whether the tab bar bounces when scrolling."}),"\n",(0,r.jsx)(n.h5,{id:"tabstyle",children:(0,r.jsx)(n.code,{children:"tabStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the individual tab items in the tab bar."}),"\n",(0,r.jsxs)(n.p,{children:["By default, all tab items take up the same pre-calculated width based on the width of the container. If you want them to take their original width, you can specify ",(0,r.jsx)(n.code,{children:"width: 'auto'"})," in ",(0,r.jsx)(n.code,{children:"tabStyle"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"indicatorstyle",children:(0,r.jsx)(n.code,{children:"indicatorStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the active indicator."}),"\n",(0,r.jsx)(n.h5,{id:"indicatorcontainerstyle",children:(0,r.jsx)(n.code,{children:"indicatorContainerStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the container view for the indicator."}),"\n",(0,r.jsx)(n.h5,{id:"contentcontainerstyle",children:(0,r.jsx)(n.code,{children:"contentContainerStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the inner container for tabs."}),"\n",(0,r.jsxs)(n.h5,{id:"style-tabbar",children:[(0,r.jsx)(n.code,{children:"style"})," (",(0,r.jsx)(n.code,{children:"TabBar"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the tab bar container."}),"\n",(0,r.jsx)(n.h5,{id:"gap",children:(0,r.jsx)(n.code,{children:"gap"})}),"\n",(0,r.jsx)(n.p,{children:"Spacing between the tab items."}),"\n",(0,r.jsxs)(n.h5,{id:"testid-tabbar",children:[(0,r.jsx)(n.code,{children:"testID"})," (",(0,r.jsx)(n.code,{children:"TabBar"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Test ID for the tab bar. Can be used for scrolling the tab bar in tests"}),"\n",(0,r.jsx)(n.h4,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.p,{children:"Options describe how each tab should be configured. There are 2 ways to specify options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"commonOptions"}),": Options that apply to all tabs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"}),": Options that apply to specific tabs. It has the route key as the key and the object with options."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"<TabView\n  commonOptions={{\n    icon: ({ route, focused, color }) => (\n      <Icon name={route.icon} color={color} />\n    ),\n  }}\n  options={{\n    albums: {\n      labelText: 'Albums',\n    },\n    profile: {\n      labelText: 'Profile',\n    },\n  }}\n/>\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following options are available:"}),"\n",(0,r.jsx)(n.h5,{id:"accessibilitylabel",children:(0,r.jsx)(n.code,{children:"accessibilityLabel"})}),"\n",(0,r.jsxs)(n.p,{children:["Accessibility label for the tab button. Uses ",(0,r.jsx)(n.code,{children:"route.accessibilityLabel"})," by default if specified, otherwise uses the route title."]}),"\n",(0,r.jsx)(n.h5,{id:"accessible",children:(0,r.jsx)(n.code,{children:"accessible"})}),"\n",(0,r.jsxs)(n.p,{children:["Whether to mark the tab as ",(0,r.jsx)(n.code,{children:"accessible"}),". Defaults to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"testid",children:(0,r.jsx)(n.code,{children:"testID"})}),"\n",(0,r.jsxs)(n.p,{children:["Test ID for the tab button. Uses ",(0,r.jsx)(n.code,{children:"route.testID"})," by default."]}),"\n",(0,r.jsx)(n.h5,{id:"labeltext",children:(0,r.jsx)(n.code,{children:"labelText"})}),"\n",(0,r.jsxs)(n.p,{children:["Label text for the tab button. Uses ",(0,r.jsx)(n.code,{children:"route.title"})," by default."]}),"\n",(0,r.jsx)(n.h5,{id:"labelallowfontscaling",children:(0,r.jsx)(n.code,{children:"labelAllowFontScaling"})}),"\n",(0,r.jsxs)(n.p,{children:["Whether label font should scale to respect Text Size accessibility settings. Defaults to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"href",children:(0,r.jsx)(n.code,{children:"href"})}),"\n",(0,r.jsx)(n.p,{children:"URL to use for the anchor tag for the tab button on the Web."}),"\n",(0,r.jsx)(n.h5,{id:"label",children:(0,r.jsx)(n.code,{children:"label"})}),"\n",(0,r.jsx)(n.p,{children:"A function that returns a custom React Element to be used as a label. The function receives an object with the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"route"})," - The route object for the tab."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labelText"})," - The label text for the tab specified in the ",(0,r.jsx)(n.code,{children:"labelText"})," option or the ",(0,r.jsx)(n.code,{children:"route title"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"focused"})," - Whether the label is for the focused state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"color"})," - The color of the label."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"allowFontScaling"})," - Whether label font should scale to respect Text Size accessibility settings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"style"})," - The style object for the label."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"label: ({ route, labelText, focused, color }) => (\n  <Text style={{ color, margin: 8 }}>{labelText ?? route.name}</Text>\n);\n"})}),"\n",(0,r.jsx)(n.h5,{id:"labelstyle",children:(0,r.jsx)(n.code,{children:"labelStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the tab item label."}),"\n",(0,r.jsx)(n.h5,{id:"icon",children:(0,r.jsx)(n.code,{children:"icon"})}),"\n",(0,r.jsx)(n.p,{children:"A function that returns a custom React Element to be used as an icon. The function receives an object with the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"route"})," - The route object for the tab."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"focused"})," - Whether the icon is for the focused state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"color"})," - The color of the icon."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"size"})," - The size of the icon."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"icon: ({ route, focused, color }) => (\n  <Icon name={focused ? 'albums' : 'albums-outlined'} color={color} />\n);\n"})}),"\n",(0,r.jsx)(n.h5,{id:"badge",children:(0,r.jsx)(n.code,{children:"badge"})}),"\n",(0,r.jsx)(n.p,{children:"A function that returns a custom React Element to be used as a badge. The function receives an object with the following properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"route"})," - The route object for the tab."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"badge: ({ route }) => (\n  <View\n    style={{ backgroundColor: 'red', width: 20, height: 20, borderRadius: 10 }}\n  />\n);\n"})}),"\n",(0,r.jsx)(n.h5,{id:"scenestyle",children:(0,r.jsx)(n.code,{children:"sceneStyle"})}),"\n",(0,r.jsx)(n.p,{children:"Style to apply to the view wrapping each screen. You can pass this to override some default styles such as overflow clipping."}),"\n",(0,r.jsx)(n.h2,{id:"optimization-tips",children:"Optimization Tips"}),"\n",(0,r.jsx)(n.h3,{id:"avoid-unnecessary-re-renders",children:"Avoid unnecessary re-renders"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"renderScene"})," function is called every time the index changes. If your ",(0,r.jsx)(n.code,{children:"renderScene"})," function is expensive, it's good idea move each route to a separate component if they don't depend on the index, and use ",(0,r.jsx)(n.code,{children:"shouldComponentUpdate"})," or ",(0,r.jsx)(n.code,{children:"React.memo"})," in your route components to prevent unnecessary re-renders."]}),"\n",(0,r.jsx)(n.p,{children:"For example, instead of:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return (\n        <View style={styles.page}>\n          <Avatar />\n          <NewsFeed />\n        </View>\n      );\n    default:\n      return null;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Do the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return <HomeComponent />;\n    default:\n      return null;\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where ",(0,r.jsx)(n.code,{children:"<HomeComponent />"})," is a ",(0,r.jsx)(n.code,{children:"PureComponent"})," if you're using class components:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default class HomeComponent extends React.PureComponent {\n  render() {\n    return (\n      <View style={styles.page}>\n        <Avatar />\n        <NewsFeed />\n      </View>\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or, wrapped in ",(0,r.jsx)(n.code,{children:"React.memo"})," if you're using function components:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function HomeComponent() {\n  return (\n    <View style={styles.page}>\n      <Avatar />\n      <NewsFeed />\n    </View>\n  );\n}\n\nexport default React.memo(HomeComponent);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"avoid-one-frame-delay",children:"Avoid one frame delay"}),"\n",(0,r.jsx)(n.p,{children:"We need to measure the width of the container and hence need to wait before rendering some elements on the screen. If you know the initial width upfront, you can pass it in and we won't need to wait for measuring it. Most of the time, it's just the window width."}),"\n",(0,r.jsxs)(n.p,{children:["For example, pass the following ",(0,r.jsx)(n.code,{children:"initialLayout"})," to ",(0,r.jsx)(n.code,{children:"TabView"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const initialLayout = {\n  height: 0,\n  width: Dimensions.get('window').width,\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"The tab view will still react to changes in the dimension and adjust accordingly to accommodate things like orientation change."}),"\n",(0,r.jsx)(n.h3,{id:"optimize-large-number-of-routes",children:"Optimize large number of routes"}),"\n",(0,r.jsx)(n.p,{children:"If you've a large number of routes, especially images, it can slow the animation down a lot. You can instead render a limited number of routes."}),"\n",(0,r.jsx)(n.p,{children:"For example, do the following to render only 2 routes on each side:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const renderScene = ({ route }) => {\n  if (Math.abs(index - routes.indexOf(route)) > 2) {\n    return <View />;\n  }\n\n  return <MySceneComponent route={route} />;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"avoid-rendering-tabview-inside-scrollview",children:"Avoid rendering TabView inside ScrollView"}),"\n",(0,r.jsxs)(n.p,{children:["Nesting the ",(0,r.jsx)(n.code,{children:"TabView"})," inside a vertical ",(0,r.jsx)(n.code,{children:"ScrollView"})," will disable the optimizations in the ",(0,r.jsx)(n.code,{children:"FlatList"})," components rendered inside the ",(0,r.jsx)(n.code,{children:"TabView"}),". So avoid doing it if possible."]}),"\n",(0,r.jsxs)(n.h3,{id:"use-lazy-and-renderlazyplaceholder-props-to-render-routes-as-needed",children:["Use ",(0,r.jsx)(n.code,{children:"lazy"})," and ",(0,r.jsx)(n.code,{children:"renderLazyPlaceholder"})," props to render routes as needed"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"lazy"})," option is disabled by default to provide a smoother tab switching experience, but you can enable it and provide a placeholder component for a better lazy loading experience. Enabling ",(0,r.jsx)(n.code,{children:"lazy"})," can improve initial load performance by rendering routes only when they come into view. Refer the ",(0,r.jsx)(n.a,{href:"#lazy",children:"prop reference"})," for more details."]})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},5525:function(e,n,i){i.d(n,{Z:()=>o});var t=i("85893");i("67294");var r=i("67026");let a="tabItem_Ymn6";function o(e){let{children:n,hidden:i,className:o}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a,o),hidden:i,children:n})}},47902:function(e,n,i){i.d(n,{Z:()=>g});var t=i("85893"),r=i("67294"),a=i("67026"),o=i("69599"),s=i("16550"),l=i("32000"),d=i("4520"),c=i("38341"),h=i("76009");function u(e){var n,i;return null!==(i=null===(n=r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===n?void 0:n.filter(Boolean))&&void 0!==i?i:[]}function p(e){let{value:n,tabValues:i}=e;return i.some(e=>e.value===n)}var x=i("7227");let b="tabList__CuJ",j="tabItem_LNqP";function m(e){let{className:n,block:i,selectedValue:r,selectValue:s,tabValues:l}=e,d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),h=e=>{let n=e.currentTarget,i=l[d.indexOf(n)].value;i!==r&&(c(n),s(i))},u=e=>{var n,i;let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let i=d.indexOf(e.currentTarget)+1;t=null!==(n=d[i])&&void 0!==n?n:d[0];break}case"ArrowLeft":{let n=d.indexOf(e.currentTarget)-1;t=null!==(i=d[n])&&void 0!==i?i:d[d.length-1]}}null==t||t.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":i},n),children:l.map(e=>{let{value:n,label:i,attributes:o}=e;return(0,t.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>d.push(e),onKeyDown:u,onClick:h,...o,className:(0,a.Z)("tabs__item",j,null==o?void 0:o.className,{"tabs__item--active":r===n}),children:null!=i?i:n},n)})})}function v(e){let{lazy:n,children:i,selectedValue:o}=e,s=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===o);return e?(0,r.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o}))})}function f(e){let n=function(e){let{defaultValue:n,queryString:i=!1,groupId:t}=e,a=function(e){let{values:n,children:i}=e;return(0,r.useMemo)(()=>{let e=null!=n?n:u(i).map(e=>{let{props:{value:n,label:i,attributes:t,default:r}}=e;return{value:n,label:i,attributes:t,default:r}});return!function(e){let n=(0,c.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(n.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[n,i])}(e),[o,x]=(0,r.useState)(()=>(function(e){var n;let{defaultValue:i,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(i){if(!p({value:i,tabValues:t}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(i,'" but none of its children has the corresponding value. Available values are: ').concat(t.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return i}let r=null!==(n=t.find(e=>e.default))&&void 0!==n?n:t[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:a})),[b,j]=function(e){let{queryString:n=!1,groupId:i}=e,t=(0,s.k6)(),a=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=i?i:null}({queryString:n,groupId:i}),o=(0,d._X)(a);return[o,(0,r.useCallback)(e=>{if(!a)return;let n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}({queryString:i,groupId:t}),[m,v]=function(e){var n;let{groupId:i}=e;let t=(n=i)?"docusaurus.tab.".concat(n):null,[a,o]=(0,h.Nk)(t);return[a,(0,r.useCallback)(e=>{if(!!t)o.set(e)},[t,o])]}({groupId:t}),f=(()=>{let e=null!=b?b:m;return p({value:e,tabValues:a})?e:null})();return(0,l.Z)(()=>{f&&x(f)},[f]),{selectedValue:o,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error("Can't select invalid tab value=".concat(e));x(e),j(e),v(e)},[j,v,a]),tabValues:a}}(e);return(0,t.jsxs)("div",{className:(0,a.Z)("tabs-container",b),children:[(0,t.jsx)(m,{...n,...e}),(0,t.jsx)(v,{...n,...e})]})}function g(e){let n=(0,x.Z)();return(0,t.jsx)(f,{...e,children:u(e.children)},String(n))}},50065:function(e,n,i){i.d(n,{Z:function(){return s},a:function(){return o}});var t=i(67294);let r={},a=t.createContext(r);function o(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);