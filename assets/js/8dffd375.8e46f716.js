"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["66058"],{12818:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>r,default:()=>v,assets:()=>l,toc:()=>c,frontMatter:()=>s});var t=JSON.parse('{"id":"navigation-events","title":"NavigationEvents reference","description":"NavigationEvents is a React component providing a declarative API to subscribe to navigation events. It will subscribe to navigation events on mount, and unsubscribe on unmount.","source":"@site/versioned_docs/version-2.x/navigation-events.md","sourceDirName":".","slug":"/navigation-events","permalink":"/docs/2.x/navigation-events","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/navigation-events.md","tags":[],"version":"2.x","frontMatter":{"id":"navigation-events","title":"NavigationEvents reference","sidebar_label":"NavigationEvents"},"sidebar":"version-2.x-api","previous":{"title":"withNavigationFocus","permalink":"/docs/2.x/with-navigation-focus"}}'),o=i("85893"),a=i("50065");let s={id:"navigation-events",title:"NavigationEvents reference",sidebar_label:"NavigationEvents"},r=void 0,l={},c=[{value:"Component props",id:"component-props",level:3},{value:"Example",id:"example",level:3}];function d(e){let n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"NavigationEvents"})," is a React component providing a declarative API to subscribe to navigation events. It will subscribe to navigation events on mount, and unsubscribe on unmount."]}),"\n",(0,o.jsx)(n.h3,{id:"component-props",children:"Component props"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"navigation"})," - navigation props (optional, defaults to reading from React context)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onWillFocus"})," - event listener"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onDidFocus"})," - event listener"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onWillBlur"})," - event listener"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onDidBlur"})," - event listener"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The event listener is the same as the imperative ",(0,o.jsx)(n.a,{href:"/docs/2.x/navigation-prop#addlistener---subscribe-to-updates-to-navigation-lifecycle",children:(0,o.jsx)(n.code,{children:"navigation.addListener(...)"})})," API."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"harmony",children:"import React from 'react';\nimport { View } from 'react-native';\nimport { NavigationEvents } from 'react-navigation';\n\nconst MyScreen = () => (\n  <View>\n    <NavigationEvents\n      onWillFocus={(payload) => console.log('will focus', payload)}\n      onDidFocus={(payload) => console.log('did focus', payload)}\n      onWillBlur={(payload) => console.log('will blur', payload)}\n      onDidBlur={(payload) => console.log('did blur', payload)}\n    />\n    {/*\n      Your view code\n    */}\n  </View>\n);\n\nexport default MyScreen;\n"})})]})}function v(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return r},a:function(){return s}});var t=i(67294);let o={},a=t.createContext(o);function s(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);