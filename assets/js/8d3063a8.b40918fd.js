"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["15397"],{20126:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>l,default:()=>w,assets:()=>d,toc:()=>u,frontMatter:()=>c});var t=JSON.parse('{"id":"multiple-drawers","title":"Multiple drawers","description":"Sometimes we want to have multiple drawers on the same screen","source":"@site/versioned_docs/version-7.x/multiple-drawers.md","sourceDirName":".","slug":"/multiple-drawers","permalink":"/docs/multiple-drawers","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/multiple-drawers.md","tags":[],"version":"7.x","frontMatter":{"id":"multiple-drawers","title":"Multiple drawers","sidebar_label":"Multiple drawers"},"sidebar":"docs","previous":{"title":"Opening a modal","permalink":"/docs/modal"},"next":{"title":"Options with nested navigators","permalink":"/docs/screen-options-resolution"}}'),a=r("85893"),i=r("50065"),o=r("47902"),s=r("5525");let c={id:"multiple-drawers",title:"Multiple drawers",sidebar_label:"Multiple drawers"},l=void 0,d={},u=[{value:"Using <code>react-native-drawer-layout</code>",id:"using-react-native-drawer-layout",level:2},{value:"Nesting 2 drawer navigators",id:"nesting-2-drawer-navigators",level:2},{value:"Summary",id:"summary",level:2}];function h(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Sometimes we want to have multiple drawers on the same screen: one on the left and one on the right. This can be achieved in 2 ways:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["By using ",(0,a.jsx)(n.a,{href:"/docs/drawer-layout",children:(0,a.jsx)(n.code,{children:"react-native-drawer-layout"})})," directly (Recommended)."]}),"\n",(0,a.jsxs)(n.li,{children:["By ",(0,a.jsx)(n.a,{href:"/docs/nesting-navigators",children:"nesting"})," 2 ",(0,a.jsx)(n.a,{href:"/docs/drawer-navigator",children:"drawer navigators"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"using-react-native-drawer-layout",children:["Using ",(0,a.jsx)(n.code,{children:"react-native-drawer-layout"})]}),"\n",(0,a.jsx)(n.p,{children:"When we have multiple drawers, only one of them shows the list of screens. The second drawer may often be used to show some additional information such as the list of users etc."}),"\n",(0,a.jsxs)(n.p,{children:["In such cases, we can use ",(0,a.jsx)(n.a,{href:"/docs/drawer-layout",children:(0,a.jsx)(n.code,{children:"react-native-drawer-layout"})})," directly to render the second drawer. The drawer navigator will be used to render the first drawer and can be nested inside the second drawer:"]}),"\n",(0,a.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <LeftDrawerScreen />\n    </Drawer>\n  );\n}\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useNavigation } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <LeftDrawerScreen />\n    </Drawer>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["But there is one problem. When we call ",(0,a.jsx)(n.code,{children:"navigation.openDrawer()"})," in our ",(0,a.jsx)(n.code,{children:"HomeScreen"}),", it always opens the left drawer. We don't have access to the right drawer via the ",(0,a.jsx)(n.code,{children:"navigation"})," object since it's not a navigator."]}),"\n",(0,a.jsx)(n.p,{children:"To solve this, we need to use context API to pass down a function to control the right drawer:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nconst RightDrawerContext = React.createContext();\n\nfunction HomeScreen() {\n  const { openRightDrawer } = React.useContext(RightDrawerContext);\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open left drawer</Button>\n      <Button onPress={() => openRightDrawer()}>Open right drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  const value = React.useMemo(\n    () => ({\n      openRightDrawer: () => setRightDrawerOpen(true),\n      closeRightDrawer: () => setRightDrawerOpen(false),\n    }),\n    []\n  );\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <RightDrawerContext.Provider value={value}>\n        <LeftDrawerScreen />\n      </RightDrawerContext.Provider>\n    </Drawer>\n  );\n}\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useNavigation } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nconst RightDrawerContext = React.createContext();\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const { openRightDrawer } = React.useContext(RightDrawerContext);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open left drawer</Button>\n      <Button onPress={() => openRightDrawer()}>Open right drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nfunction RightDrawerScreen() {\n  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);\n\n  const value = React.useMemo(\n    () => ({\n      openRightDrawer: () => setRightDrawerOpen(true),\n      closeRightDrawer: () => setRightDrawerOpen(false),\n    }),\n    []\n  );\n\n  return (\n    <Drawer\n      open={rightDrawerOpen}\n      onOpen={() => setRightDrawerOpen(true)}\n      onClose={() => setRightDrawerOpen(false)}\n      drawerPosition=\"right\"\n      renderDrawerContent={() => <>{/* Right drawer content */}</>}\n    >\n      <RightDrawerContext.Provider value={value}>\n        <LeftDrawerScreen />\n      </RightDrawerContext.Provider>\n    </Drawer>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here, we are using the ",(0,a.jsx)(n.code,{children:"RightDrawerContext"})," to pass down the ",(0,a.jsx)(n.code,{children:"openRightDrawer"})," function to the ",(0,a.jsx)(n.code,{children:"HomeScreen"}),". Then we use ",(0,a.jsx)(n.code,{children:"openRightDrawer"})," to open the right drawer."]}),"\n",(0,a.jsx)(n.h2,{id:"nesting-2-drawer-navigators",children:"Nesting 2 drawer navigators"}),"\n",(0,a.jsxs)(n.p,{children:["An alternative approach is to nest 2 ",(0,a.jsx)(n.a,{href:"/docs/drawer-navigator",children:"drawer navigators"})," inside each other. This is not recommended since it requires creating an additional screen and more nesting - which can make navigating and type checking more verbose. But this can be useful if both navigators include multiple screens."]}),"\n",(0,a.jsx)(n.p,{children:"Here we have 2 drawer navigators nested inside each other, one is positioned on left and the other on the right:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(n.pre,{"data-name":"Multiple drawers","data-snack":"true",children:(0,a.jsx)(n.code,{className:"language-js",metastring:'name="Multiple drawers" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst RightDrawerScreen = createDrawerNavigator({\n  screenOptions: {\n    drawerPosition: 'right',\n    headerShown: false,\n  },\n  screens: {\n    HomeDrawer: LeftDrawerScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(n.pre,{"data-name":"Multiple drawers","data-snack":"true",children:(0,a.jsx)(n.code,{className:"language-js",metastring:'name="Multiple drawers" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nconst RightDrawer = createDrawerNavigator();\n\nconst RightDrawerScreen = () => {\n  return (\n    <RightDrawer.Navigator\n      screenOptions={{ drawerPosition: 'right', headerShown: false }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,a.jsx)("source",{src:"/assets/navigators/drawer/drawer-multiple.mp4"})}),"\n",(0,a.jsxs)(n.p,{children:["But there is one problem. When we call ",(0,a.jsx)(n.code,{children:"navigation.openDrawer()"})," in our ",(0,a.jsx)(n.code,{children:"HomeScreen"}),", it always opens the left drawer since it's the immediate parent of the screen."]}),"\n",(0,a.jsxs)(n.p,{children:["To solve this, we need to use ",(0,a.jsx)(n.a,{href:"/docs/navigation-object#getparent",children:(0,a.jsx)(n.code,{children:"navigation.getParent"})})," to refer to the right drawer which is the parent of the left drawer. So our code would look like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"<Button onPress={() => navigation.openDrawer()} >Open left drawer</Button>\n<Button onPress={() => navigation.getParent().openDrawer()}>Open right drawer</Button>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["However, this means that our button needs to know about the parent navigators, which isn't ideal. If our button is further nested inside other navigators, it'd need multiple ",(0,a.jsx)(n.code,{children:"getParent()"})," calls. To address this, we can use the ",(0,a.jsxs)(n.a,{href:"/docs/navigator#id",children:[(0,a.jsx)(n.code,{children:"id"})," prop"]})," to identify the parent navigator."]}),"\n",(0,a.jsxs)(n.p,{children:["To customize the contents of the drawer, we can use the ",(0,a.jsxs)(n.a,{href:"/docs/drawer-navigator#drawercontent",children:[(0,a.jsx)(n.code,{children:"drawerContent"})," prop"]})," to pass in a function that renders a custom component."]}),"\n",(0,a.jsx)(n.p,{children:"The final code would look like this:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,a.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,a.jsx)(n.pre,{"data-name":"Multiple drawers navigators","data-snack":"true",children:(0,a.jsx)(n.code,{className:"language-js",metastring:'name="Multiple drawers navigators" snack',children:"import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.getParent('LeftDrawer').openDrawer()}>\n        Open left drawer\n      </Button>\n      <Button onPress={() => navigation.getParent('RightDrawer').openDrawer()}>\n        Open right drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawerScreen = createDrawerNavigator({\n  id: 'LeftDrawer',\n  screenOptions: {\n    drawerPosition: 'left',\n  },\n  screens: {\n    Home: HomeScreen,\n  },\n});\n\nconst RightDrawerScreen = createDrawerNavigator({\n  id: 'RightDrawer',\n  drawerContent: (props) => <RightDrawerContent {...props} />,\n  screenOptions: {\n    drawerPosition: 'right',\n    headerShown: false,\n  },\n  screens: {\n    HomeDrawer: LeftDrawerScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RightDrawerScreen);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,a.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,a.jsx)(n.pre,{"data-name":"Multiple drawers navigators","data-snack":"true",children:(0,a.jsx)(n.code,{className:"language-js",metastring:'name="Multiple drawers navigators" snack',children:"import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.getParent('LeftDrawer').openDrawer()}>\n        Open left drawer\n      </Button>\n      <Button onPress={() => navigation.getParent('RightDrawer').openDrawer()}>\n        Open right drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nfunction LeftDrawerScreen() {\n  return (\n    <LeftDrawer.Navigator\n      id=\"LeftDrawer\"\n      screenOptions={{ drawerPosition: 'left' }}\n    >\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n}\n\nconst RightDrawer = createDrawerNavigator();\n\nfunction RightDrawerScreen() {\n  return (\n    <RightDrawer.Navigator\n      id=\"RightDrawer\"\n      drawerContent={(props) => <RightDrawerContent {...props} />}\n      screenOptions={{\n        drawerPosition: 'right',\n        headerShown: false,\n      }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here, we are passing ",(0,a.jsx)(n.code,{children:'"LeftDrawer"'})," and ",(0,a.jsx)(n.code,{children:'"RightDrawer"'})," strings (you can use any string here) in the ",(0,a.jsx)(n.code,{children:"id"})," prop of the drawer navigators. Then we use ",(0,a.jsx)(n.code,{children:"navigation.getParent('LeftDrawer').openDrawer()"})," to open the left drawer and ",(0,a.jsx)(n.code,{children:"navigation.getParent('RightDrawer').openDrawer()"})," to open the right drawer."]}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["To have multiple drawers, you can use ",(0,a.jsx)(n.a,{href:"/docs/drawer-layout",children:(0,a.jsx)(n.code,{children:"react-native-drawer-layout"})})," directly in combination with a drawer navigator."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.a,{href:"/docs/drawer-layout#drawerposition",children:(0,a.jsx)(n.code,{children:"drawerPosition"})})," prop can be used to position the drawer on the right."]}),"\n",(0,a.jsxs)(n.li,{children:["The methods to control the drawer can be passed down using context API when using ",(0,a.jsx)(n.a,{href:"/docs/drawer-layout",children:(0,a.jsx)(n.code,{children:"react-native-drawer-layout"})}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["When nesting multiple navigators, you can use ",(0,a.jsx)(n.a,{href:"/docs/navigation-object#getparent",children:(0,a.jsx)(n.code,{children:"navigation.getParent"})})," in combination with the ",(0,a.jsxs)(n.a,{href:"/docs/navigator#id",children:[(0,a.jsx)(n.code,{children:"id"})," prop"]})," to refer to the desired drawer."]}),"\n"]})]})}function w(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5525:function(e,n,r){r.d(n,{Z:()=>o});var t=r("85893");r("67294");var a=r("67026");let i="tabItem_Ymn6";function o(e){let{children:n,hidden:r,className:o}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:r,children:n})}},47902:function(e,n,r){r.d(n,{Z:()=>x});var t=r("85893"),a=r("67294"),i=r("67026"),o=r("69599"),s=r("16550"),c=r("32000"),l=r("4520"),d=r("38341"),u=r("76009");function h(e){var n,r;return null!==(r=null===(n=a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===n?void 0:n.filter(Boolean))&&void 0!==r?r:[]}function w(e){let{value:n,tabValues:r}=e;return r.some(e=>e.value===n)}var g=r("7227");let p="tabList__CuJ",m="tabItem_LNqP";function f(e){let{className:n,block:r,selectedValue:a,selectValue:s,tabValues:c}=e,l=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),u=e=>{let n=e.currentTarget,r=c[l.indexOf(n)].value;r!==a&&(d(n),s(r))},h=e=>{var n,r;let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let r=l.indexOf(e.currentTarget)+1;t=null!==(n=l[r])&&void 0!==n?n:l[0];break}case"ArrowLeft":{let n=l.indexOf(e.currentTarget)-1;t=null!==(r=l[n])&&void 0!==r?r:l[l.length-1]}}null==t||t.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},n),children:c.map(e=>{let{value:n,label:r,attributes:o}=e;return(0,t.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:h,onClick:u,...o,className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":a===n}),children:null!=r?r:n},n)})})}function v(e){let{lazy:n,children:r,selectedValue:o}=e,s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===o);return e?(0,a.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o}))})}function D(e){let n=function(e){let{defaultValue:n,queryString:r=!1,groupId:t}=e,i=function(e){let{values:n,children:r}=e;return(0,a.useMemo)(()=>{let e=null!=n?n:h(r).map(e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(n.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[n,r])}(e),[o,g]=(0,a.useState)(()=>(function(e){var n;let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!w({value:r,tabValues:t}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(r,'" but none of its children has the corresponding value. Available values are: ').concat(t.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return r}let a=null!==(n=t.find(e=>e.default))&&void 0!==n?n:t[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:n,tabValues:i})),[p,m]=function(e){let{queryString:n=!1,groupId:r}=e,t=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:r}),o=(0,l._X)(i);return[o,(0,a.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}({queryString:r,groupId:t}),[f,v]=function(e){var n;let{groupId:r}=e;let t=(n=r)?"docusaurus.tab.".concat(n):null,[i,o]=(0,u.Nk)(t);return[i,(0,a.useCallback)(e=>{if(!!t)o.set(e)},[t,o])]}({groupId:t}),D=(()=>{let e=null!=p?p:f;return w({value:e,tabValues:i})?e:null})();return(0,c.Z)(()=>{D&&g(D)},[D]),{selectedValue:o,selectValue:(0,a.useCallback)(e=>{if(!w({value:e,tabValues:i}))throw Error("Can't select invalid tab value=".concat(e));g(e),m(e),v(e)},[m,v,i]),tabValues:i}}(e);return(0,t.jsxs)("div",{className:(0,i.Z)("tabs-container",p),children:[(0,t.jsx)(f,{...n,...e}),(0,t.jsx)(v,{...n,...e})]})}function x(e){let n=(0,g.Z)();return(0,t.jsx)(D,{...e,children:h(e.children)},String(n))}},50065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return o}});var t=r(67294);let a={},i=t.createContext(a);function o(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);