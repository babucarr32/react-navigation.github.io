"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["42875"],{55646:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>r});var i=JSON.parse('{"id":"navigation-actions","title":"NavigationActions reference","description":"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.","source":"@site/versioned_docs/version-1.x/navigation-actions.md","sourceDirName":".","slug":"/navigation-actions","permalink":"/docs/1.x/navigation-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/navigation-actions.md","tags":[],"version":"1.x","frontMatter":{"id":"navigation-actions","title":"NavigationActions reference","sidebar_label":"NavigationActions"},"sidebar":"api","previous":{"title":"Navigation prop","permalink":"/docs/1.x/navigation-prop"},"next":{"title":"StackNavigator","permalink":"/docs/1.x/stack-navigator"}}'),a=t("85893"),s=t("50065");let r={id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},o=void 0,c={},l=[{value:"Navigate",id:"navigate",level:3},{value:"Reset",id:"reset",level:3},{value:"How to use the <code>index</code> parameter",id:"how-to-use-the-index-parameter",level:4},{value:"Replace",id:"replace",level:3},{value:"Back",id:"back",level:3},{value:"SetParams",id:"setparams",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["All ",(0,a.jsx)(n.code,{children:"NavigationActions"})," return an object that can be sent to the router using ",(0,a.jsx)(n.code,{children:"navigation.dispatch()"})," method."]}),"\n",(0,a.jsx)(n.p,{children:"Note that if you want to dispatch react-navigation actions you should use the action creators provided in this library."}),"\n",(0,a.jsx)(n.p,{children:"The following actions are supported:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#navigate",children:"Navigate"})," - Navigate to another route"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#back",children:"Back"})," - Go back to previous state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#setparams",children:"Set Params"})," - Set Params for given route"]}),"\n",(0,a.jsx)(n.li,{children:"Init - Used to initialize first state if state is undefined"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Within a stack, you can also use:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#reset",children:"Reset"})," - Replace current state with a new state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#replace",children:"Replace"})," - Replace a route at a given key with another route"]}),"\n",(0,a.jsx)(n.li,{children:"Push - Add a route on the top of the stack, and navigate forward to it"}),"\n",(0,a.jsx)(n.li,{children:"Pop - Navigate back to previous routes"}),"\n",(0,a.jsx)(n.li,{children:"PopToTop - Navigate to the top route of the stack, dismissing all other routes"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The action creator functions define ",(0,a.jsx)(n.code,{children:"toString()"})," to return the action type, which enables easy usage with third-party Redux libraries, including redux-actions and redux-saga."]}),"\n",(0,a.jsx)(n.h3,{id:"navigate",children:"Navigate"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Navigate"})," action will update the current state with the result of a ",(0,a.jsx)(n.code,{children:"Navigate"})," action."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"routeName"})," - ",(0,a.jsx)(n.em,{children:"String"})," - Required - A destination routeName that has been registered somewhere in the app's router"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"})," - ",(0,a.jsx)(n.em,{children:"Object"})," - Optional - Params to merge into the destination route"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"action"})," - ",(0,a.jsx)(n.em,{children:"Object"})," - Optional - (advanced) The sub-action to run in the child router, if the screen is a navigator. Any one of the actions described in this doc can be set as a sub-action."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"key"})," - ",(0,a.jsx)(n.em,{children:"String"})," - Optional - The identifier for the route to navigate to. Navigate back to this route if it already exists"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"reset",children:"Reset"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Reset"})," action wipes the whole navigation state and replaces it with the result of several actions."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"index"})," - ",(0,a.jsx)(n.em,{children:"number"})," - required - Index of the active route on ",(0,a.jsx)(n.code,{children:"routes"})," array in navigation ",(0,a.jsx)(n.code,{children:"state"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"actions"})," - ",(0,a.jsx)(n.em,{children:"array"})," - required - Array of Navigation Actions that will replace the navigation state."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"key"})," - ",(0,a.jsx)(n.em,{children:"string or null"})," - optional - If set, the navigator with the given key will reset. If null, the root navigator will reset."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"how-to-use-the-index-parameter",children:["How to use the ",(0,a.jsx)(n.code,{children:"index"})," parameter"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"index"})," param is used to specify the current active route."]}),"\n",(0,a.jsxs)(n.p,{children:["eg: given a basic stack navigation with two routes ",(0,a.jsx)(n.code,{children:"Profile"})," and ",(0,a.jsx)(n.code,{children:"Settings"}),".\nTo reset the state to a point where the active screen was ",(0,a.jsx)(n.code,{children:"Settings"})," but have it stacked on top of a ",(0,a.jsx)(n.code,{children:"Profile"})," screen, you would do the following:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"replace",children:"Replace"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Replace"})," action replaces the route at the given key with another route."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"key"})," - _string - required - Key of the route to replace."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"newKey"})," - _string - Key to use for the replacement route. Generated automatically if not provided."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"routeName"})," - _string - ",(0,a.jsx)(n.code,{children:"routeName"})," to use for replacement route."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"})," - ",(0,a.jsx)(n.em,{children:"object"})," - Parameters to pass in to the replacement route."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"action"})," - ",(0,a.jsx)(n.em,{children:"object"})," - Optional sub-action."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"immediate"}),"* - ",(0,a.jsx)(n.em,{children:"boolean"})," - ",(0,a.jsx)(n.em,{children:"Currently has no effect"}),", this is a placeholder for when ",(0,a.jsx)(n.code,{children:"StackNavigator"})," supports animated replace (it currently does not)."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"back",children:"Back"}),"\n",(0,a.jsxs)(n.p,{children:["Go back to previous screen and close current screen. ",(0,a.jsx)(n.code,{children:"back"})," action creator takes in one optional parameter:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"key"})," - ",(0,a.jsx)(n.em,{children:"string or null"})," - optional - If set, navigation will go back from the given key. If null, navigation will go back anywhere."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"setparams",children:"SetParams"}),"\n",(0,a.jsxs)(n.p,{children:["When dispatching ",(0,a.jsx)(n.code,{children:"SetParams"}),", the router will produce a new state that has changed the params of a particular route, as identified by the key"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"})," - ",(0,a.jsx)(n.em,{children:"object"})," - required - New params to be merged into existing route params"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"key"})," - ",(0,a.jsx)(n.em,{children:"string"})," - required - Route key that should get the new params"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return r}});var i=t(67294);let a={},s=i.createContext(a);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);